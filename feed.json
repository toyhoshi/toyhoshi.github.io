{
    "version": "https://jsonfeed.org/version/1",
    "title": "www.clouday.dev",
    "description": "",
    "home_page_url": "https://www.clouday.dev",
    "feed_url": "https://www.clouday.dev/feed.json",
    "user_comment": "",
    "author": {
        "name": "Toyhoshi"
    },
    "items": [
        {
            "id": "https://www.clouday.dev/hello-kubernetes.html",
            "url": "https://www.clouday.dev/hello-kubernetes.html",
            "title": "Learned lessons on cloud, containers, micro-services and more",
            "summary": "Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly&hellip;",
            "content_html": "<blockquote>\n<p>Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.</p>\n</blockquote>\n<p>The name Kubernetes originates from Greek, meaning helmsman or pilot. K8s as an abbreviation results from counting the eight letters between the \"K\" and the \"s\". Google open-sourced the Kubernetes project in 2014. Kubernetes combines <a href=\"https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/\">over 15 years of Google's experience</a> running production workloads at scale with best-of-breed ideas and practices from the community.</p>\n<hr>\n<p> </p>",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "Kubernetes"
            ],
            "date_published": "2021-08-28T12:08:49+02:00",
            "date_modified": "2022-01-16T18:13:27+01:00"
        },
        {
            "id": "https://www.clouday.dev/crypto-policies.html",
            "url": "https://www.clouday.dev/crypto-policies.html",
            "title": "RedHat system-wide crypto policies (rhel 8.2)",
            "summary": "Across enterprise IT the security landscape is changing and attackers are coming up with more sophisticated attacks. The cryptographic algorithms that might be robust and&hellip;",
            "content_html": "<blockquote>\n<p>Across enterprise IT the security landscape is changing and attackers are coming up with more sophisticated attacks. The cryptographic algorithms that might be robust and reliable today, may not necessarily be so tomorrow.</p>\n</blockquote>\n<p style=\"font-weight: 400;\">In RHEL 8.2 to enable users to specify their own crypto policies if the built-in policies do not meet their requirements.</p>\n<p style=\"font-weight: 400;\">As a refresher, system-wide crypto policies introduced in RHEL 8 are:</p>\n<ol style=\"font-weight: 400;\">\n<li style=\"font-weight: var(--pfe-theme--font-weight--default,400);\">Centrally managed on the system using a simple command to show the currently set system-wide crypto policy and update the system-wide crypto policy.$ update-crypto-policies --show DEFAULT<strong>Update the system-wide crypto policy to set the level to future</strong>$ update-crypto-policies --set FUTURE Setting system policy to FUTURE</li>\n<li style=\"font-weight: var(--pfe-theme--font-weight--default,400);\"><strong>Show the system-wide crypto policy currently in effect </strong></li>\n<li style=\"font-weight: var(--pfe-theme--font-weight--default,400);\">Effective across applications built using core cryptographic subsystems. For example, if your application leverages OpenSSL, or GnuTLS, these applications will be able to benefit from the RHEL crypto policies. </li>\n<li style=\"font-weight: var(--pfe-theme--font-weight--default,400);\">Configurable to a particular predefined policy level. In RHEL 8, four policies are provided under the names \"LEGACY\", \"DEFAULT\", \"FUTURE\" and \"FIPS\". Detailed settings about each policy are <a href=\"https://access.redhat.com/articles/3642912\">summarized in this post about strong crypto defaults in RHEL 8</a> and update-crypto-policies man pages.</li>\n</ol>\n<h3 dir=\"ltr\">Modifying an existing crypto policy</h3>\n<p dir=\"ltr\">To modify existing crypto policies, use policy modifier modules. These are text files that include policy instructions to the <code>update-crypto-policies</code> tool. </p>\n<p dir=\"ltr\">The naming of these files must follow the following convention: <strong>&lt;MODULE&gt;.pmod</strong>, where <strong>&lt;MODULE&gt;</strong> is the name of the modifier in uppercase without spaces, and .pmod is the file extension in lowercase. </p>\n<p>The location of these files should be:</p>\n<p><code>/etc/crypto-policies/policies/modules</code> folder <span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">(or the </span><code style=\"font-weight: var(--font-weight-normal);\">/usr/share/crypto-policies/policies/modules</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> folder if they are in installed packages).</span></p>\n<p> </p>\n<h3>SSL_ERROR_UNSUPPORTED_HASH_ALGORITHM</h3>\n<p>Try to revert back to legacy policy: <strong><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\">sudo update-crypto-policies --set LEGACY </span></strong></p>\n<p>To get <span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">the old policy, use: <strong>sudo update-crypto-policies --set DEFAULT:FEDORA32</strong> <br>To get back to current policy: <strong>sudo update-crypto-policies --set DEFAULT</strong></span></p>\n<p> </p>\n<p class=\"msg msg--success\"><em><a href=\"#INTERNAL_LINK#/post/null\" title=\"https://www.redhat.com/en/blog/how-customize-crypto-policies-rhel-82\">https://www.redhat.com/en/blog/how-customize-crypto-policies-rhel-82</a></em></p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
            ],
            "date_published": "2020-12-08T18:30:38+01:00",
            "date_modified": "2022-01-16T18:14:03+01:00"
        },
        {
            "id": "https://www.clouday.dev/service-discovery-microservices-on-aws.html",
            "url": "https://www.clouday.dev/service-discovery-microservices-on-aws.html",
            "title": "Service Discovery - Microservices on AWS",
            "summary": "The term \"microservice architecture\" is now commonly used to define the development of an application as a suite of small independent services that communicate with&hellip;",
            "content_html": "<p>The term \"microservice architecture\" is now commonly used to define the development of an application as a suite of small independent services that communicate with each other via some form of HTTP resource API.  </p>\n<p>One of the primary challenges with microservices architectures is allowing services to discover and interact with each other, thus was born the concept of service discovery: a concept where a service makes itself discoverable so that another service can call it by name without knowing its physical location or server address. </p>\n<p>There are three main approaches to service discovery used in the development community today:</p>\n<ul>\n<li>Server-side service discovery</li>\n<li>Client-side service discovery</li>\n<li>Service mesh</li>\n</ul>\n<p>The service-side approach is the simplest form of service discovery, each service sits behind a load balancer and client of the service use URI of the load balancer to invoke the service, it is the responsibility of the load balancer to maintain some sort of registry for storing information about different services.  An <em>AWS Elastic Load Balancer</em> (ELB) is an example of this approach.</p>\n<p>In client-side mode, it is the client that must take care of balancing and maintain the service registry which knows the locations of all service instances.  One example of this approach is <em>Netflix Eureka</em> with <a href=\"https://github.com/Netflix/ribbon\"></a><em>Netflix Ribbo</em>n or <em>Hashicorp Consul</em> or <em>etcd.</em></p>\n<p>On the AWS side, there is also a dns-based service discovery: Amazon ECS now includes integrated service discovery that makes it easy for your containerized services to discover and connect with each other. Previously, to ensure that services were able to discover and connect with each other, you had to configure and run your own service discovery system based on Amazon Route 53, AWS Lambda, and ECS Event Stream, or connect every service to a load balancer.</p>\n<p>Amazon ECS creates and manages a registry of service names using the Route 53 Auto Naming API. Names are automatically mapped to a set of DNS records so that you can refer to a service by name in your code and write DNS queries to have the name resolve to the service’s endpoint at runtime. You can specify health check conditions in a service's task definition and Amazon ECS ensures that only healthy service endpoints are returned by a service lookup.</p>\n<p>Another option is to leverage the capabilities of AWS Cloud Map. AWS Cloud Map extends the capabilities of the Auto Naming APIs by providing a service registry for resources, such as IPs, URLs, and ARNs, and offering an API-based service discovery mechanism with a faster change propagation and the ability to use attributes to narrow down the set of discovered resources. Existing Route 53 Auto Naming resources are upgraded automatically to AWS Cloud Map.</p>\n<p>Finally we have the service mesh approach: service meshes are an additional layer for handling inter-service communication, which is responsible for monitoring and controlling traffic in microservice architectures. This allows tasks, like service discovery, to be completely handled by this layer.</p>\n<p>Typically, a service mesh is split into a data plane and a control plane. The data plane consists of a set of intelligent proxies that are deployed with the application code as a special sidecar proxy that intercepts all network communication between microservices. The control plane is responsible for communicating with the proxies.</p>\n<p>Service meshes are transparent, which means that application developers don’t have to be aware of this additional layer and don’t have to make changes to existing application code. AWS App Mesh is a service mesh that provides application-level networking to make it easy for your services to communicate with each other across multiple types of compute infrastructure. App Mesh standardizes how your services communicate, giving you end-to-end visibility and ensuring high availability for your applications.</p>\n<p>You can use AWS App Mesh with existing or new microservices running on AWS Fargate, Amazon ECS, Amazon EKS, and self-managed Kubernetes on AWS. App Mesh can monitor and control communications for microservices running across clusters, orchestration systems, or VPCs as a single application without any code changes.</p>\n<p> </p>",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
            ],
            "date_published": "2020-09-13T18:12:31+02:00",
            "date_modified": "2021-01-05T11:58:10+01:00"
        },
        {
            "id": "https://www.clouday.dev/august-2020-whats-new.html",
            "url": "https://www.clouday.dev/august-2020-whats-new.html",
            "title": "August 2020: what&#x27;s new at AWS",
            "content_html": "<div class=\"title-wrapper\">\n<div class=\"row title\">\n<div class=\"twelve columns\">\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#AWS_Fargate_for_Amazon_ECS_now_supports_UDP_load_balancing_with_Network_Load_Balancer\">AWS Fargate for Amazon ECS now supports UDP load balancing with Network Load Balancer</a></li>\n<li><a href=\"#Amazon_ECS_announces_AWS_Copilot,_a_new_CLI_to_deploy_and_operate_containers_in_AWS\">Amazon ECS announces AWS Copilot, a new CLI to deploy and operate containers in AWS</a></li>\n</ul>\n</div>\n<h4 id=\"AWS_Fargate_for_Amazon_ECS_now_supports_UDP_load_balancing_with_Network_Load_Balancer\">AWS Fargate for Amazon ECS now supports UDP load balancing with Network Load Balancer</h4>\n</div>\n</div>\n</div>\n<div class=\"aws-text-box\">\n<div class=\"  \">\n<p>You can now use a <a href=\"https://aws.amazon.com/elasticloadbalancing/\">Network Load Balancer</a> (NLB) to distribute UDP traffic to container-based applications running on <a href=\"https://aws.amazon.com/fargate/\">AWS Fargate</a> orchestrated by <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service</a> (ECS). Network Load Balancers are fully-managed load balancers that operate at the connection level (Layer-4) and are capable of handling millions of requests at ultra-low latency. Until now, you could use Network Load Balancers with AWS Fargate only with the TCP protocol. With this new integration, you get the simplicity of serverless containers to run applications on Fargate that use the UDP protocol. You can run workloads such as DNS, IoT, real-time media, and syslog while maintaining high throughput at ultra low latency through the Network Load Balancer.</p>\n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2020/07/31/image-4.jpg\" data-is-external-image=\"true\" ></p>\n</div>\n</div>\n<div class=\"parsys content\">\n<div class=\"aws-text-box section\">\n<div class=\"  \">\n<p>Fargate support for the UDP protocol through a Network Load Balancer is available in Platform Version 1.4 for the Amazon ECS container orchestration service. The support is available in US East (N. Virginia), US West (Oregon), Europe (Ireland), and Asia Pacific (Tokyo) Regions. For more information, please see the <a href=\"https://aws.amazon.com/blogs/containers/aws-fargate-now-supports-udp-load-balancing-with-network-load-balancer/\">blog post</a> and the Network Load Balancer <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html\">documentation</a> page.</p>\n<p> </p>\n<div class=\"title-wrapper\">\n<div class=\"row title\">\n<div class=\"twelve columns\">\n<h4 id=\"Amazon_ECS_announces_AWS_Copilot,_a_new_CLI_to_deploy_and_operate_containers_in_AWS\">Amazon ECS announces AWS Copilot, a new CLI to deploy and operate containers in AWS</h4>\n</div>\n</div>\n</div>\n<p><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Today, </span><a href=\"https://aws.amazon.com/ecs/\" style=\"font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Amazon Elastic Container Service (ECS)</a><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> announced AWS Copilot, a command line interface tool that helps customers develop, release, and operate containerized applications on AWS. With a single command, AWS Copilot creates all infrastructure and artifacts required to run production-ready service on Amazon ECS and AWS Fargate, including task definitions, image repositories, and AWS resources like load balancers, deployment pipelines. With AWS Copilot, users can focus on developing their applications rather than setting up infrastructure.</span></p>\n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2020/06/24/copilot-help.png\" data-is-external-image=\"true\"  alt=\"Amazon Announces New Command Line Interface Tool AWS Copilot\"></p>\n<div class=\"parsys content\">\n<div class=\"aws-text-box section\">\n<div class=\"  \">\n<p>With AWS Copilot you can launch your service using one of the built in service patterns providing you secure and scalable infrastructure. Once your service is up and running, AWS Copilot has built in commands to easily add more services, infrastructure like databases or Amazon S3 Buckets, or even new deployment environments in different accounts and regions. While getting started and growing your application is important, AWS Copilot wants to make it easy for you to release and operate your application too. AWS Copilot lets you set up a fully functional CI/CD <a href=\"https://aws.amazon.com/codepipeline/\" target=\"_blank\" rel=\"noopener\">AWS CodePipeline</a> with just two commands to safely deploy through multiple deployment stages. Additionally, you can view all of your services' logs and health in seconds without having to leave your terminal. Finally, with AWS Copilot, you can choose a collaboration model that fits your team. When using AWS Copilot you can work alone or share your application with other users in your AWS account.  </p>\n</div>\n</div>\n<div class=\"aws-text-box section\">\n<div class=\"  \">\n<p>To get started, see the following resources:</p>\n<ul>\n<li>Copilot can deploy applications to AWS Fargate supported regions and is available for download on Mac and Linux <a href=\"https://github.com/aws/copilot-cli/wiki/Installation\" target=\"_blank\" rel=\"noopener\">here</a>.</li>\n<li>Connect with us and learn more about the project on our open source <a href=\"https://github.com/aws/amazon-ecs-cli-v2\" target=\"_blank\" rel=\"noopener\">GitHub repository</a>.</li>\n<li>Read about <a href=\"https://aws.amazon.com/blogs/containers/introducing-aws-copilot/\" target=\"_blank\" rel=\"noopener\">AWS Copilot</a> on the AWS Containers blog.</li>\n<li>See tutorials with Copilot in our <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_Copilot_CLI.html\" target=\"_blank\" rel=\"noopener\">documentation</a>.</li>\n</ul>\n</div>\n</div>\n</div>\n<p> </p>\n</div>\n</div>\n</div>",
            "image": "https://www.clouday.dev/media/posts/7/whatsnew_aws.png",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
            ],
            "date_published": "2020-08-13T11:13:48+02:00",
            "date_modified": "2020-11-29T12:48:05+01:00"
        },
        {
            "id": "https://www.clouday.dev/automation-vs-orchestration-whats-the-difference.html",
            "url": "https://www.clouday.dev/automation-vs-orchestration-whats-the-difference.html",
            "title": "Automation vs. Orchestration: What’s the Difference?",
            "summary": "Whether your applications and data are housed on-premise or in the cloud, automation and orchestration make complex business processes run smoothly. The more workloads you’re&hellip;",
            "content_html": "<div id=\"item-5c798ec9b208fc28721ef693\" class=\"sqs-layout sqs-grid-12 columns-12\" data-layout-label=\"Post Body\" data-type=\"item\" data-updated-on=\"1551470823709\">\n<div id=\"yui_3_17_2_1_1597227630910_273\" class=\"row sqs-row\">\n<div id=\"yui_3_17_2_1_1597227630910_272\" class=\"col sqs-col-12 span-12\">\n<div id=\"block-yui_3_17_2_1_1564677119000_171191\" class=\"sqs-block image-block sqs-block-image sqs-text-ready\" data-block-type=\"5\">\n<div id=\"yui_3_17_2_1_1597227630910_271\" class=\"sqs-block-content\">\n<div id=\"yui_3_17_2_1_1597227630910_270\" class=\"\n          image-block-outer-wrapper\n          layout-caption-below\n          design-layout-inline\n          combination-animation-none\n          individual-animation-none\n          individual-text-animation-none\n        \" data-test=\"image-block-inline-outer-wrapper\">\n<figure id=\"yui_3_17_2_1_1597227630910_269\" class=\"\n              sqs-block-image-figure\n              intrinsic\n            \">\n<div id=\"yui_3_17_2_1_1597227630910_268\" class=\"\n                image-block-wrapper\n                \n          \n        \n                has-aspect-ratio\n              \" data-animation-role=\"image\"><figure class=\"thumb-image loaded\"><img loading=\"lazy\"  src=\"https://images.squarespace-cdn.com/content/v1/5a09abcb90bcce4bd5518c91/1564683630206-XX7DT7NV0Y4VK136AF7O/ke17ZwdGBToddI8pDm48kCuklj2YuBCXDCzdVfA7N54UqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYwL8IeDg6_3B-BRuF4nNrNcQkVuAT7tdErd0wQFEGFSnPNZb1olE9Yx5khhoDIGVPJo4r7RzB4Bw8BE5J_vMuAuETvjpvZO0R1wDX8fMpw45w/Complex+roads?format=1500w\" data-is-external-image=\"true\"  alt=\"Complex roads\" data-src=\"https://images.squarespace-cdn.com/content/v1/5a09abcb90bcce4bd5518c91/1564683630206-XX7DT7NV0Y4VK136AF7O/ke17ZwdGBToddI8pDm48kCuklj2YuBCXDCzdVfA7N54UqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYwL8IeDg6_3B-BRuF4nNrNcQkVuAT7tdErd0wQFEGFSnPNZb1olE9Yx5khhoDIGVPJo4r7RzB4Bw8BE5J_vMuAuETvjpvZO0R1wDX8fMpw45w/Complex+roads\" data-image=\"https://images.squarespace-cdn.com/content/v1/5a09abcb90bcce4bd5518c91/1564683630206-XX7DT7NV0Y4VK136AF7O/ke17ZwdGBToddI8pDm48kCuklj2YuBCXDCzdVfA7N54UqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYwL8IeDg6_3B-BRuF4nNrNcQkVuAT7tdErd0wQFEGFSnPNZb1olE9Yx5khhoDIGVPJo4r7RzB4Bw8BE5J_vMuAuETvjpvZO0R1wDX8fMpw45w/Complex+roads\" data-image-dimensions=\"2500x980\" data-image-focal-point=\"0.5,0.5\" data-load=\"false\" data-image-id=\"5d432e1096cf600001f6a1ed\" data-type=\"image\" data-image-resolution=\"1500w\"></figure></div>\n</figure>\n</div>\n</div>\n</div>\n<div id=\"block-4c7d07e39c54d59e30df\" class=\"sqs-block html-block sqs-block-html\" data-block-type=\"2\">\n<div class=\"sqs-block-content\">\n<p class=\"\">Whether your applications and data are housed on-premise or in the cloud, automation and orchestration make complex business processes run smoothly. The more workloads you’re managing, the more helpful these tools will be no matter what your IT strategy is.</p>\n<p class=\"\">To understand automation vs. orchestration, it’s helpful to consider each function on its own, first.</p>\n<h2>What is IT automation?</h2>\n<p class=\"\">Automation, generally speaking, means completing a single task or function without human intervention. Executed wisely, automation makes traditionally time-intensive, manual processes more efficient and reliable.</p>\n<p class=\"\">In IT, it’s possible to automate a wide range of processes and tasks, from app deployment and integration, to securing endpoints and creating service tickets, for both on-premise and cloud tasks. In cloud automation, for instance, you might use automation tools and machine learning to dynamically deploy assets to the cloud, manage cloud computing workloads or classify terabytes of images—something our partner, Google Cloud, can help you do.</p>\n<h2>What is orchestration?</h2>\n<p class=\"\">At its core, Orchestration is most akin to managing a large-scale virtual environment or network. Orchestrating the scheduling and integration of automated tasks between complex distributed systems and services—whether on-premise or in the cloud—streamlines and simplifies interconnected workloads, repeatable processes, and operations. Using today’s orchestration tools, you can automate the arrangement, coordination and management of complex computer systems, middleware and services within your computing environment, and direct automated processes to support larger workflows.</p>\n<p class=\"\">With modern IT teams now responsible for managing hundreds to thousands of applications and servers, manual administration simply can’t scale today’s needs. Orchestration is essential for delivering highly available, dynamically scaling, performant applications, and cloud systems, relieving your team of a very heavy burden. </p>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://www.clouday.dev/media/posts/6/AutomationVsOrchestration.png",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "Orchestration",
                   "Automation"
            ],
            "date_published": "2020-08-12T12:21:40+02:00",
            "date_modified": "2020-08-15T16:09:52+02:00"
        },
        {
            "id": "https://www.clouday.dev/what-is-amazon-elastic-container-service.html",
            "url": "https://www.clouday.dev/what-is-amazon-elastic-container-service.html",
            "title": "What is Amazon Elastic Container Service?",
            "summary": " Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service that makes it easy to run, stop, and manage containers on&hellip;",
            "content_html": "<div class=\"awsdocs-page-header-container\">\n<div class=\"awsdocs-page-header\"> </div>\n</div>\n<p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service that makes it easy to run, stop, and manage containers on a cluster. Your containers are defined in a task definition which you use to run individual tasks or as a service. You can run your tasks and services on a serverless infrastructure that is managed by AWS Fargate or, for more control over your infrastructure, you can run your tasks and services on a cluster of Amazon EC2 instances that you manage.</p>\n<p>Amazon ECS enables you to launch and stop your container-based applications with simple API calls. You can also retrieve the state of your cluster from a centralized service and, for existing users of Amazon EC2, access many familiar Amazon EC2 features.</p>\n<p>You can schedule the placement of your containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you do not have to operate your own cluster management and configuration management systems or worry about scaling your management infrastructure.</p>\n<p>Amazon ECS can be used to create a consistent deployment and build experience, manage, and scale batch and Extract-Transform-Load (ETL) workloads, and build sophisticated application architectures on a microservices model. </p>",
            "image": "https://www.clouday.dev/media/posts/5/ECS.png",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "ECS"
            ],
            "date_published": "2020-08-12T12:19:56+02:00",
            "date_modified": "2020-08-15T16:10:58+02:00"
        },
        {
            "id": "https://www.clouday.dev/ecs-vs-fargate-whats-the-difference.html",
            "url": "https://www.clouday.dev/ecs-vs-fargate-whats-the-difference.html",
            "title": "ECS vs. Fargate: What&#x27;s the difference?",
            "summary": "When discussing options to run Docker on AWS, I’m often asked about the differences between ECS and EKS or Kubernets. However, lately, a new question arises: What’s&hellip;",
            "content_html": "<div class=\"row\">\n<div class=\"col-sm-8 offset-sm-2\">\n<div class=\"meta-information\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">When discussing options to run Docker on AWS, I’m often asked about the differences between ECS and </span><a href=\"https://cloudonaut.io/eks-vs-ecs-orchestrating-containers-on-aws/\" style=\"font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">EKS</a><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> or </span><a href=\"https://cloudonaut.io/ecs-vs-kubernetes/\" style=\"font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Kubernets</a><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">. However, lately, a new question arises: What’s the difference between ECS and </span><a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html\" target=\"_blank\" rel=\"noopener\" style=\"font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">AWS Fargate</a><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">? In this blog post, you get the answer. You also learn about the advantages and disadvantages of both options.</span></div>\n</div>\n</div>\n<div class=\"row content\">\n<div class=\"col-12 col-sm-8\">\n<p>To understand the difference, let’s divide the ECS service into two responsibilities:</p>\n<ol>\n<li>Managing the lifecycle and placement of tasks</li>\n<li>Running containers</li>\n</ol>\n</div>\n</div>",
            "image": "https://www.clouday.dev/media/posts/4/ECSvsFargate.jpeg",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "Fargate",
                   "ECS"
            ],
            "date_published": "2020-08-12T10:38:39+02:00",
            "date_modified": "2020-08-15T16:12:38+02:00"
        },
        {
            "id": "https://www.clouday.dev/why-use-infrastructure-as-code.html",
            "url": "https://www.clouday.dev/why-use-infrastructure-as-code.html",
            "title": "Why use infrastructure as code?",
            "summary": "Infrastructure as code is the process of provisioning and managing your cloud resources by writing a template file that is both human readable, and machine&hellip;",
            "content_html": "<p>Infrastructure as code is the process of provisioning and managing your cloud resources by writing a template file that is both human readable, and machine consumable. For AWS cloud development the built-in choice for infrastructure as code is <a href=\"https://aws.amazon.com/cloudformation/\" target=\"_blank\" class=\"highlight\" rel=\"noopener\">AWS CloudFormation</a>.</p>\n<p>Using AWS CloudFormation you can write a description of the resources that you want to create on your AWS account, and then ask AWS CloudFormation to make this description into reality. For example the following YAML template snippet describes an AWS ECS service resource to create:</p>\n<pre><code class=\"language-yaml hljs\"><span class=\"hljs-attr\">Service:</span>\n<span class=\"hljs-attr\">  Type:</span> <span class=\"hljs-string\">'AWS::ECS::Service'</span>\n<span class=\"hljs-attr\">  DependsOn:</span> <span class=\"hljs-string\">'ServiceDiscoveryService'</span>\n<span class=\"hljs-attr\">  Properties:</span>\n<span class=\"hljs-attr\">    ServiceName:</span> <span class=\"hljs-string\">'app'</span>\n<span class=\"hljs-attr\">    Cluster:</span> <span class=\"hljs-string\">'production'</span>\n<span class=\"hljs-attr\">    DeploymentConfiguration:</span>\n<span class=\"hljs-attr\">      MaximumPercent:</span> <span class=\"hljs-number\">200</span>\n<span class=\"hljs-attr\">      MinimumHealthyPercent:</span> <span class=\"hljs-number\">75</span>\n<span class=\"hljs-attr\">    DesiredCount:</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attr\">    TaskDefinition:</span> !Ref <span class=\"hljs-string\">'TaskDefinition'</span>\n<span class=\"hljs-attr\">    ServiceRegistries:</span>\n<span class=\"hljs-attr\">      - RegistryArn:</span> !GetAtt ServiceDiscoveryService.Arn\n<span class=\"hljs-attr\">        ContainerPort:</span> <span class=\"hljs-number\">3000</span>\n<span class=\"hljs-attr\">        ContainerName:</span> <span class=\"hljs-string\">'myapp'</span>\n</code></pre>\n<p>AWS CloudFormation takes this template and then assumes the responsibility of creating, updating, and deleting resources on your AWS account according to what is described in the template. If you add a new resource to the file CloudFormation will create that resource on your account. If you update a resource CloudFormation will either update or replace any existing matching resources. And if you remove a resource from the template it will be cleaned up and removed from your AWS account.</p>",
            "image": "https://www.clouday.dev/media/posts/2/iac.png",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "IaC"
            ],
            "date_published": "2020-08-11T15:25:28+02:00",
            "date_modified": "2020-08-15T16:17:00+02:00"
        },
        {
            "id": "https://www.clouday.dev/cloud-where-are-you.html",
            "url": "https://www.clouday.dev/cloud-where-are-you.html",
            "title": "Amazon MSK now supports Apache Kafka version upgrades",
            "summary": " Amazon MSK is a fully managed service for Apache Kafka that makes it easy for you to build and run applications that use Apache&hellip;",
            "content_html": "<p class=\"align-center\"><img loading=\"lazy\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRXLrst9S_iKjPIQnxMxVQONXNfW7ja8xGm6g&amp;usqp=CAU\" data-is-external-image=\"true\"  alt=\"Let The Adventure Begin Coffee Mug - New Journey Gift ...\"></p>\n<p>Amazon MSK is a fully managed service for Apache Kafka that makes it easy for you to build and run applications that use Apache Kafka as a data store. Amazon MSK is 100% compatible with Apache Kafka, which enables you to quickly migrate your existing Apache Kafka workloads to Amazon MSK with confidence or build new ones from scratch. With Amazon MSK, you spend more time innovating on applications and less time managing clusters. </p>",
            "image": "https://www.clouday.dev/media/posts/1/unsplash-md-2.jpg",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "Kafka"
            ],
            "date_published": "2020-08-02T10:05:26+02:00",
            "date_modified": "2021-01-05T10:59:08+01:00"
        },
        {
            "id": "https://www.clouday.dev/what-is-a-terraform-and-infrastructure-as-code.html",
            "url": "https://www.clouday.dev/what-is-a-terraform-and-infrastructure-as-code.html",
            "title": "What is a Terraform and Infrastructure as Code?",
            "summary": "Terraform is an open source tool built by Hashicorp to automate the provisioning of infrastructure resources. It is used to build, manage, update and delete&hellip;",
            "content_html": "<p>Terraform is an open source tool built by Hashicorp to automate the provisioning of infrastructure resources. It is used to build, manage, update and delete infrastructure resources like virtual machines, containers, networking and others using infrastructure as a coding philosophy. Terraform is a vendor agnostic tool and can manage infrastructure for multiple resource providers (for example AWS, Google Cloud, Azure, Aviatrix, Heroku, Oracle, etc.).</p>\n<p>In simple terms, if you want to provision a Virtual Private Cloud or an EC2 instance in AWS, you can write a terraform configuration to automate this process rather than doing it manually from AWS console.</p>",
            "image": "https://www.clouday.dev/media/posts/3/Terraform.png",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "IaC"
            ],
            "date_published": "2019-02-07T15:50:00+01:00",
            "date_modified": "2020-08-15T16:18:50+02:00"
        }
    ]
}
