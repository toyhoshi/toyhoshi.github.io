{
    "version": "https://jsonfeed.org/version/1",
    "title": "www.clouday.dev",
    "description": "",
    "home_page_url": "https://www.clouday.dev",
    "feed_url": "https://www.clouday.dev/feed.json",
    "user_comment": "",
    "author": {
        "name": "Toyhoshi"
    },
    "items": [
        {
            "id": "https://www.clouday.dev/crossplaneio-assemble-infrastructure-from-multiple-vendors.html",
            "url": "https://www.clouday.dev/crossplaneio-assemble-infrastructure-from-multiple-vendors.html",
            "title": "Assemble infrastructure from multiple vendors",
            "summary": " Crossplane is an open source Kubernetes add-on that enables platform teams to assemble infrastructure from multiple vendors, and expose higher level self-service APIs for&hellip;",
            "content_html": "<p><img loading=\"lazy\" src=\"https://blog.upbound.io/content/images/2022/01/image.png\" data-is-external-image=\"true\" ></p>\n<p class=\"align-left\">Crossplane is an open source Kubernetes add-on that enables platform teams to assemble infrastructure from multiple vendors, and expose higher level self-service APIs for application teams to consume, without having to write any code.</p>\n<p class=\"align-left\">Crossplane extends your Kubernetes cluster, providing you with CRDs for any infrastructure or managed service. Compose these granular resources into higher level abstractions that can be versioned, managed, deployed and consumed using your favorite tools and existing processes you've already integrated with your clusters.</p>",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
            ],
            "date_published": "2022-01-30T16:29:00+01:00",
            "date_modified": "2022-01-30T16:29:00+01:00"
        },
        {
            "id": "https://www.clouday.dev/handling-aws-auth-in-eks-clusters.html",
            "url": "https://www.clouday.dev/handling-aws-auth-in-eks-clusters.html",
            "title": "Handling aws-auth in EKS Clusters",
            "summary": " If you use EKS then you have found yourself in a situation where a user can't access the cluster despite having all the IAM&hellip;",
            "content_html": "<p><img loading=\"lazy\" src=\"https://images.unsplash.com/photo-1559599173-92df446bb253?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80\" data-is-external-image=\"true\"  alt=\"stacked magazine\"></p>\n<p>If you use EKS then you have found yourself in a situation where a user can't access the cluster despite having all the IAM permissions and gets an <code>Unauthorized</code> message.  AWS EKS uses <code>IAM credentials</code> for <code>authentication</code> and <code>Kubernetes RBAC</code> for <code>authorization</code>. As per <a href=\"https://docs.aws.amazon.com/eks/latest/userguide/managing-auth.html\">EKS docs</a>:</p>\n<blockquote>\n<p><code>EKS uses IAM permissions for authentication of valid entities such IAM users or roles. All the permissions for interacting with the EKS cluster is managed through Kubernetes RBAC</code></p>\n</blockquote>\n<p>or simply put, EKS doesn't work the same way as other services such as S3 where if you have <code>AmazonS3FullAccess</code>, you can access any S3 bucket and create or delete files/folders. In EKS, IAM permissions are only used to check if the user has valid IAM credentials and permissions to run any command using <code>kubectl</code> such as <code>kubectl get pods</code> is managed by Kubernetes API that uses <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/rbac/\">RBAC</a> to control the access.</p>\n<p>By default, the <code>IAM Role</code> or <code>IAM User</code> that was used to create the cluster, is added to the <code>system:masters</code> group and gets cluster-wide admin permission with <code>cluster-admin</code> ClusterRole.</p>\n<p>As per <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles\">Kubernetes documentation</a> <code>system:masters</code> group is one of the <code>default</code> ClusterRoleBindings available in the Kubernetes cluster, it's attached to the <code>cluster-admin</code> ClusterRole that gives the user admin permissions in the cluster.</p>\n<div class=\"table-wrapper-paragraph\">\n<table>\n<thead>\n<tr>\n<th>Default ClusterRole</th>\n<th>Default ClusterRoleBinding</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cluster-admin</td>\n<td>system:masters group</td>\n<td>Allows super-user access to perform any action on any resource.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>Note:</strong> This mapping of creator IAM User or Role to <code>system:masters</code> group is not visible in any configuration such as <code>aws-auth</code> configmap.</p>\n<p>EKS allows giving access to other users by adding them in a configmap <code>aws-auth</code> in <code>kube-system</code> namespace. By default, this configmap is empty. However, If you are using <code>eksctl</code> to create the cluster, this config map will have the role created by <code>eksctl</code> for the node group and this role is attached to the <code>system:bootstrappers</code> and <code>system:nodes</code> groups.</p>\n<p><code>aws-auth</code> configmap is based on <a href=\"https://github.com/kubernetes-sigs/aws-iam-authenticator\">aws-iam-authenticator</a> and has several configuration options:</p>\n<ol>\n<li><strong>mapRoles</strong></li>\n<li><strong>mapUsers</strong></li>\n<li><strong>mapAccounts</strong></li>\n</ol>\n<h2> </h2>\n<h2><a name=\"using-maproles-to-map-an-iam-role-to-the-cluster\" href=\"https://dev.to/aws-builders/eks-auth-deep-dive-4fib#using-maproles-to-map-an-iam-role-to-the-cluster\"></a>Using mapRoles to Map an IAM Role to the Cluster</h2>\n<p><code>mapRoles</code> allows mapping an <code>IAM role</code> in the cluster to allow any entity or user assuming that role to access the cluster. After mapping an IAM role with <code>mapRoles</code>, any user or entity assuming this role is allowed to access the cluster, However, the level of access is defined by the <code>groups</code> attribute.</p>\n<p><code>mapRoles</code> has three attributes:</p>\n<ol>\n<li><strong>rolearn</strong> - IAM Role ARN to map to EKS cluster.</li>\n<li><strong>username</strong> - Username for the IAM Role to map in Kubernetes, this could be a static value like <code>eks-developer</code> or <code>ci-account</code> or a templated variable like <code>{{AccountID}}/{{SessionName}}/{{EC2PrivateDNSName}}</code> or both. This value would be printed in the <code>aws-authenticator</code> Cloudwatch logs if logging is enabled.</li>\n<li><strong>groups</strong> - List of Kubernetes groups that are defined in <code>ClusterRoleBinding/RoleBinding</code>. Example</li>\n</ol>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code>  <span class=\"na\">subjects</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Group</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">my-group\"</span>\n    <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Let's create two IAM roles </span><code style=\"font-weight: var(--font-weight-normal);\">eks-admin</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> and </span><code style=\"font-weight: var(--font-weight-normal);\">eks-dev</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> and assume the </span><code style=\"font-weight: var(--font-weight-normal);\">eks-admin</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> role to create a cluster with one node group:</span></div>\n</div>\n</div>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">eksctl.io/v1alpha5</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterConfig</span>\n\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">iam-auth-cluster</span>\n  <span class=\"na\">region</span><span class=\"pi\">:</span> <span class=\"s\">us-east-1</span>\n  <span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">1.21\"</span>\n\n<span class=\"na\">availabilityZones</span><span class=\"pi\">:</span> \n  <span class=\"pi\">-</span> <span class=\"s\">us-east-1a</span>\n  <span class=\"pi\">-</span> <span class=\"s\">us-east-1b</span>\n  <span class=\"pi\">-</span> <span class=\"s\">us-east-1c</span>\n\n<span class=\"na\">cloudWatch</span><span class=\"pi\">:</span>\n  <span class=\"na\">clusterLogging</span><span class=\"pi\">:</span>\n    <span class=\"na\">enableTypes</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">authenticator\"</span><span class=\"pi\">]</span>\n\n<span class=\"na\">managedNodeGroups</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">managed-ng-1</span>\n    <span class=\"na\">instanceType</span><span class=\"pi\">:</span> <span class=\"s\">t2.micro</span>\n    <span class=\"na\">minSize</span><span class=\"pi\">:</span> <span class=\"m\">1</span>\n    <span class=\"na\">maxSize</span><span class=\"pi\">:</span> <span class=\"m\">4</span>\n    <span class=\"na\">desiredCapacity</span><span class=\"pi\">:</span> <span class=\"m\">4</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Once created, this cluster would have one NodeGroup and the IAM role associated with this node group would be added to the </span><code style=\"font-weight: var(--font-weight-normal);\">aws-auth</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> configmap. </span><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Check the contents of </span><code style=\"font-weight: var(--font-weight-normal);\">aws-auth</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> configMap :</span></div>\n</div>\n</div>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>kubectl get configmap aws-auth <span class=\"nt\">-n</span> kube-system <span class=\"nt\">-oyaml</span>\n</code></pre>\n</div>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">v1</span>\n<span class=\"na\">data</span><span class=\"pi\">:</span>\n  <span class=\"na\">mapRoles</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n    <span class=\"s\">- groups:</span>\n      <span class=\"s\">- system:bootstrappers</span>\n      <span class=\"s\">- system:nodes</span>\n      <span class=\"s\">rolearn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eksctl-iam-auth-cluster-nodegroup-NodeInstanceRole-1RNKIEA50ZD0B</span>\n      <span class=\"s\">username: system:node:{{EC2PrivateDNSName}}</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ConfigMap</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">aws-auth</span>\n  <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s\">kube-system</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">By default, only </span><code style=\"font-weight: var(--font-weight-normal);\">IAM Role</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> that created the cluster would have access to the cluster, any other IAM Role has to be added separately added in </span><code style=\"font-weight: var(--font-weight-normal);\">aws-auth</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">. Let's try to assume the </span><code style=\"font-weight: var(--font-weight-normal);\">eks-developer</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> IAM role and try to access the cluster with that role.</span></div>\n</div>\n</div>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>kubectl get pods\n\nerror: You must be logged <span class=\"k\">in </span>to the server <span class=\"o\">(</span>Unauthorized<span class=\"o\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">As expected, </span><code style=\"font-weight: var(--font-weight-normal);\">eks-developer</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> IAM role would not be allowed access. To allow </span><code style=\"font-weight: var(--font-weight-normal);\">eks-developer</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> IAM role access to the cluster, add the mapping in the </span><code style=\"font-weight: var(--font-weight-normal);\">aws-auth</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> configMap to map this role to </span><code style=\"font-weight: var(--font-weight-normal);\">eks-developer</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> Kubernetes user. We can either directly edit the configMap or use </span><code style=\"font-weight: var(--font-weight-normal);\">eksctl</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> to add this mapping:</span></div>\n</div>\n</div>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>eksctl create iamidentitymapping <span class=\"se\">\\</span>\n  <span class=\"nt\">--cluster</span> iam-auth-cluster <span class=\"se\">\\</span>\n  <span class=\"nt\">--region</span> us-east-1 <span class=\"se\">\\</span>\n  <span class=\"nt\">--arn</span> <span class=\"s2\">\"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--username</span> <span class=\"s2\">\"eks-developer\"</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">this would create an entry under the </span><code style=\"font-weight: var(--font-weight-normal);\">mapRoles</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> section in </span><code style=\"font-weight: var(--font-weight-normal);\">aws-auth</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> configMap :</span></div>\n</div>\n</div>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">v1</span>\n<span class=\"na\">data</span><span class=\"pi\">:</span>\n  <span class=\"na\">mapRoles</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n    <span class=\"s\">- groups:</span>\n      <span class=\"s\">- system:bootstrappers</span>\n      <span class=\"s\">- system:nodes</span>\n      <span class=\"s\">rolearn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eksctl-iam-auth-cluster-nodegroup-NodeInstanceRole-1RNKIEA50ZD0B</span>\n      <span class=\"s\">username: system:node:{{EC2PrivateDNSName}}</span>\n\n    <span class=\"s\">- rolearn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer</span>\n      <span class=\"s\">username: eks-developer</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ConfigMap</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">aws-auth</span>\n  <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s\">kube-system</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Let's try again accessing cluster by assuming the </span><code style=\"font-weight: var(--font-weight-normal);\">eks-developer</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> IAM role:</span></div>\n</div>\n</div>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>kubectl get pods\n\nError from server <span class=\"o\">(</span>Forbidden<span class=\"o\">)</span>: pods is forbidden: User <span class=\"s2\">\"eks-developer\"</span> cannot list resource <span class=\"s2\">\"pods\"</span> <span class=\"k\">in </span>API group <span class=\"s2\">\"\"</span> at the cluster scope\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">This time, we can access the cluster, however not allowed to list pods in the cluster due to not having enough RBAC permissions. RBAC permissions can be assigned to this IAM role in two ways :</span></div>\n</div>\n</div>\n<p><strong>1. RBAC permissions with Kubernetes User</strong><br><strong>2. RBAC permissions with Kubernetes Groups</strong></p>\n<h3> </h3>\n<h3><a name=\"rbac-permissions-with-kubernetes-user\" href=\"https://dev.to/aws-builders/eks-auth-deep-dive-4fib#rbac-permissions-with-kubernetes-user\"></a>RBAC permissions with Kubernetes User</h3>\n<p>We can assign RBAC permissions to an IAM role by binding mapped <code>Kubernetes User</code> in <code>aws-auth</code> i.e <code>eks-developer</code> to a <code>ClusterRole</code>/<code>Role</code>.</p>\n<ol>\n<li>\n<p>Create a <strong>ClusterRole</strong> <code>eks-developer-cluster-role</code> with permissions to <code>get</code>, <code>list</code> or <code>watch</code> the <code>pods</code> resources :</p>\n<pre class=\"highlight yaml\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">rbac.authorization.k8s.io/v1beta1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRole</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">eks-developer-cluster-role</span>\n<span class=\"na\">rules</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">apiGroups</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">\"</span><span class=\"pi\">]</span> <span class=\"c1\"># Pod is part of Core API Group and \"\" indicates the core API group</span>\n    <span class=\"na\">resources</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">pods\"</span><span class=\"pi\">]</span> <span class=\"c1\"># pods resource</span>\n    <span class=\"na\">verbs</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">get\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">list\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">watch\"</span><span class=\"pi\">]</span> <span class=\"c1\"># Allow user to get, list of watch the pods.</span>\n</code></pre>\n</li>\n<li>\n<p>We have mapped IAM role <code>arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer</code> to Kubernetes user <code>eks-developer</code> in <code>aws-auth</code>, now create a <strong>ClusterRoleBinding</strong> to bind <code>developer-cluster-role</code> to the Kubernetes user <code>eks-developer</code>.</p>\n<pre class=\"highlight yaml\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">rbac.authorization.k8s.io/v1beta1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRoleBinding</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">eks-developer-user-cluster-role-binding</span>\n<span class=\"na\">subjects</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">User</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">eks-developer</span> <span class=\"c1\"># Kubernetes User mapped to the IAM role in aws-auth configmap.</span>\n    <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n<span class=\"na\">roleRef</span><span class=\"pi\">:</span>\n  <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRole</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">eks-developer-cluster-role</span>\n  <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n</code></pre>\n</li>\n<li>\n<p>Access the cluster again by assuming the IAM role <code>eks-developer</code></p>\n<pre class=\"highlight shell\"><code>kubectl get pods <span class=\"nt\">-A</span>\n\nNAMESPACE     NAME                       READY   STATUS    RESTARTS   AGE\nkube-system   aws-node-f584p             1/1     Running   0          79m\nkube-system   coredns-66cb55d4f4-8hjj2   1/1     Running   0          91m\nkube-system   coredns-66cb55d4f4-vtf6j   1/1     Running   0          91m\nkube-system   kube-proxy-psjk5           1/1     Running   0          79m\n</code></pre>\n</li>\n</ol>\n<p>and this time it works!!! <code></code></p>\n<h3> </h3>\n<h3><a name=\"rbac-permissions-with-kubernetes-groups\" href=\"https://dev.to/aws-builders/eks-auth-deep-dive-4fib#rbac-permissions-with-kubernetes-groups\"></a>RBAC permissions with Kubernetes Groups</h3>\n<p>While assigning permissions directly to the Kubernetes User works just fine for most of the use-cases however this approach is not so great if you want to audit who is assuming the IAM role and accessing the cluster and would like additional information captured in the audit logs.</p>\n<p>One such use-case is <strong>AWS SSO</strong>, where many users are assigned to a permission set and whenever these users log in using their credentials, they assume the same <code>IAM role</code>.</p>\n<p>We can assign IAM permissions to an IAM role by creating a Kubernetes Group and add it to the <code>mapRoles.groups</code> field of IAM Role mapping in <code>aws-auth</code>.</p>\n<p>Let's take the earlier example of the <code>eks-developer</code> IAM role and create a ClusterRoleBinding with Kubernetes Group <code>developer</code> bound to <code>eks-developer-cluster-role</code> and add Kubernetes Group <code>developer</code> in the mapping of this IAM role in <code>aws-auth</code>.</p>\n<ol>\n<li>\n<p>First delete the earlier ClusterRoleBinding <code>eks-developer-user-cluster-role-binding</code> :</p>\n<pre class=\"highlight shell\"><code>kubectl delete clusterrolebindings eks-developer-user-cluster-role-binding\nclusterrolebinding.rbac.authorization.k8s.io <span class=\"s2\">\"eks-developer-user-cluster-role-binding\"</span> deleted\n</code></pre>\n<p>As soon as we delete the <code>ClusterRolebinding</code>, <code>eks-developer</code> IAM role won't be able to list the pods, let's check the access by assuming the <code>eks-developer</code> IAM role :</p>\n<pre class=\"highlight shell\"><code>kubectl get pods <span class=\"nt\">-A</span>\nError from server <span class=\"o\">(</span>Forbidden<span class=\"o\">)</span>: pods is forbidden: User <span class=\"s2\">\"eks-developer\"</span> cannot list resource <span class=\"s2\">\"pods\"</span> <span class=\"k\">in </span>API group <span class=\"s2\">\"\"</span> <span class=\"k\">in </span>the namespace <span class=\"s2\">\"default\"</span>\n</code></pre>\n</li>\n<li>\n<p>Delete <strong>IAM Mapping</strong> from <code>aws-auth</code> :</p>\n<pre class=\"highlight shell\"><code>eksctl delete iamidentitymapping <span class=\"se\">\\</span>\n      <span class=\"nt\">--cluster</span> iam-auth-cluster <span class=\"se\">\\</span>\n      <span class=\"nt\">--region</span> us-east-1 <span class=\"se\">\\</span>\n      <span class=\"nt\">--arn</span> <span class=\"s2\">\"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer\"</span>\n</code></pre>\n</li>\n<li>\n<p>Create a <strong>ClusterRoleBinding</strong> to bind Kubernetes Group <code>developer</code> to cluster role <code>eks-developer-cluster-role</code>:</p>\n<pre class=\"highlight yaml\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">rbac.authorization.k8s.io/v1beta1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRoleBinding</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">eks-developer-group-cluster-role-binding</span>\n<span class=\"na\">subjects</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Group</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">developer</span>\n    <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n<span class=\"na\">roleRef</span><span class=\"pi\">:</span>\n  <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRole</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">eks-developer-cluster-role</span>\n  <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n</code></pre>\n</li>\n<li>\n<p>Add Kubernetes Group <code>developer</code> to IAM role mapping of <code>eks-developer</code> in <code>aws-auth</code> and include the session name in username using templated variable <code>{{SessionName}}</code>:</p>\n<pre class=\"highlight shell\"><code>eksctl create iamidentitymapping <span class=\"se\">\\</span>\n  <span class=\"nt\">--cluster</span> iam-auth-cluster <span class=\"se\">\\</span>\n  <span class=\"nt\">--region</span> us-east-1 <span class=\"se\">\\</span>\n  <span class=\"nt\">--arn</span> <span class=\"s2\">\"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--username</span> <span class=\"s2\">\"eks-developer:{{SessionName}}\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--group</span> <span class=\"s2\">\"developer\"</span>\n</code></pre>\n<p>this would create an entry under <code>mapRoles</code> section in <code>aws-auth</code> configmap as:</p>\n<pre class=\"highlight yaml\"><code><span class=\"na\">mapRoles</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n  <span class=\"s\">- groups:</span>\n    <span class=\"s\">- developer</span>\n    <span class=\"s\">rolearn: arn:aws:iam::017558828988:role/eks-developer</span>\n    <span class=\"s\">username: eks-developer:{{SessionName}}</span>\n</code></pre>\n</li>\n</ol>\n<p>Check the Cloudwatch <code>authenticator</code> logs for the authenticated user assuming <code>eks-developer</code> IAM role and we can see that this time session name is appended to the username in logs:</p>\n<p class=\"msg msg--info\"><code>time=\"2021-09-13T17:57:46Z\" level=info msg=\"access granted\" arn=\"arn:aws:iam::0175XXXXXXXX:role/eks-developer\" client=\"127.0.0.1:48520\" groups=\"[developer]\" method=POST path=/authenticate sts=sts.us-east-1.amazonaws.com uid=\"heptio-authenticator-aws:0175XXXXXXXX:AROAQIFUWO66PDOXKSLMQ\" username=\"eks-developer:eks-developer-session\"</code></p>\n<p>If the session name consists of <code>@</code>, it would be replaced with <code>-</code>. Let's assume the IAM role <code>eks-developer</code> with session name containing <code>@</code> :</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>aws sts assume-role <span class=\"se\">\\</span>\n    <span class=\"nt\">--role-arn</span> <span class=\"s2\">\"&lt;IAM_ROLE_ARN&gt;\"</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--role-session-name</span> <span class=\"s2\">\"my-develper-session@123456789\"</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--duration-seconds</span> 3600</code></pre>\n</div>\n<p>Now Cloudwatch logs would have session name printed as <code>eks-developer:my-developer-session-123456789</code>.</p>\n<p class=\"msg msg--info\"><code>time=\"2021-09-14T17:50:25Z\" level=info msg=\"access granted\" arn=\"arn:aws:iam::017558828988:role/eks-developer\" client=\"127.0.0.1:57794\" groups=\"[developer]\" method=POST path=/authenticate sts=sts.us-east-1.amazonaws.com uid=\"heptio-authenticator-aws:017558828988:AROAQIFUWO66PDOXKSLMQ\" username=\"eks-developer:my-develper-session-123456789\"</code></p>\n<p>There is one problem here, if your EKS cluster is being accessed from <strong>multiple AWS accounts</strong>, it would not be possible to track the AWS account of the user who accessed the EKS cluster just by session name.</p>\n<p><code>{{AccountID}}</code> comes to the rescue, we can use this templated variable to get the <strong>AWS account ID</strong> of the user who is assuming the role, so we can set the username to :</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>aws:<span class=\"o\">{{</span>AccountID<span class=\"o\">}}</span>:eks-developer:<span class=\"o\">{{</span>SessionName<span class=\"o\">}}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Please note that </span><code style=\"font-weight: var(--font-weight-normal);\">iamidentitymapping</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> can't be overridden with </span><code style=\"font-weight: var(--font-weight-normal);\">eksctl</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">, so you have to delete it and create it again.</span></div>\n</div>\n</div>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>eksctl delete iamidentitymapping <span class=\"se\">\\</span>\n      <span class=\"nt\">--cluster</span> <span class=\"s2\">\"iam-auth-cluster\"</span> <span class=\"se\">\\</span>\n      <span class=\"nt\">--region</span> <span class=\"s2\">\"us-east-1\"</span> <span class=\"se\">\\</span>\n      <span class=\"nt\">--arn</span> <span class=\"s2\">\"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer\"</span>\n\neksctl create iamidentitymapping <span class=\"se\">\\</span>\n      <span class=\"nt\">--cluster</span> <span class=\"s2\">\"iam-auth-cluster\"</span> <span class=\"se\">\\</span>\n      <span class=\"nt\">--region</span> <span class=\"s2\">\"us-east-1\"</span> <span class=\"se\">\\</span>\n      <span class=\"nt\">--arn</span> <span class=\"s2\">\"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/eks-developer\"</span> <span class=\"se\">\\</span>\n      <span class=\"nt\">--username</span> <span class=\"s2\">\"aws:{{AccountID}}:eks-developer:{{SessionName}}\"</span> <span class=\"se\">\\</span>\n      <span class=\"nt\">--group</span> <span class=\"s2\">\"developer\"</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Now we would get the </span><code style=\"font-weight: var(--font-weight-normal);\">AWS Account ID</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> along with </span><code style=\"font-weight: var(--font-weight-normal);\">Session Name</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> in cloudwatch logs :</span></div>\n</div>\n</div>\n<p class=\"msg msg--info\"><code>time=\"2021-09-14T18:26:33Z\" level=info msg=\"access granted\" arn=\"arn:aws:iam::017558828988:role/eks-developer\" client=\"127.0.0.1:39752\" groups=\"[developer]\" method=POST path=/authenticate sts=sts.us-east-1.amazonaws.com uid=\"heptio-authenticator-aws:0175XXXXXXXX:AROAQIFUWO66PDOXKSLMQ\" username=\"aws:0175XXXXXXXX:eks-developer:my-develper-session-123456789\"</code></p>\n<p><strong>Note: If you want session name in raw format, you can use templated variable <code>{{SessionNameRaw}}</code> instead. However as of EKS 1.21, these two variables <code>{{AccessKeyID}}</code> and <code>{{SessionNameRaw}}</code> don't work.</strong></p>\n<h2> </h2>\n<h2><a name=\"using-mapuser-to-map-an-iam-user-to-the-cluster\" href=\"https://dev.to/aws-builders/eks-auth-deep-dive-4fib#using-mapuser-to-map-an-iam-user-to-the-cluster\"></a>Using mapUser to Map an IAM User to the Cluster</h2>\n<p><code>mapUsers</code> allows mapping an <code>IAM User</code> to the cluster and add the user to one or more Kubernetes Groups. It has 3 attributes :</p>\n<ol>\n<li><strong>userarn</strong> - ARN of IAM User to map to EKS cluster. This could be an IAM user from the same AWS account or another account.</li>\n<li><strong>username</strong> - Static username to map this IAM User to, in Kubernetes.</li>\n<li><strong>groups</strong> - List of Kubernetes groups that are defined in <code>ClusterRoleBinding/RoleBinding</code>.</li>\n</ol>\n<p><strong>Note: Templated variables are not supported in <code>username</code> field with mapUser.</strong></p>\n<p>To add an IAM user with ARN <code>arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:user/dev-user</code> in <code>aws-auth</code> configmap, we can run the below command:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>eksctl create iamidentitymapping <span class=\"se\">\\</span>\n  <span class=\"nt\">--cluster</span> iam-auth-cluster <span class=\"se\">\\</span>\n  <span class=\"nt\">--region</span> us-east-1 <span class=\"se\">\\</span>\n  <span class=\"nt\">--arn</span> <span class=\"s2\">\"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:user/dev-user\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--username</span> <span class=\"s2\">\"dev-user\"</span></code></pre>\n</div>\n<p>this command would add these lines in <code>aws-auth</code> configMap:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code>  <span class=\"na\">mapUsers</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n    <span class=\"s\">- userarn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:user/dev-user</span>\n      <span class=\"s\">username: dev-user</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Since we didn't specify any group, </span><code style=\"font-weight: var(--font-weight-normal);\">dev-user</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> would be able to authenticate to the cluster, however wouldn't be able to </span><code style=\"font-weight: var(--font-weight-normal);\">list</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> or </span><code style=\"font-weight: var(--font-weight-normal);\">get</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> any resources.</span></div>\n</div>\n</div>\n<p>For users mapped using <code>mapUsers</code>, RBAC permission can be given in two ways :</p>\n<p><strong>1. RBAC permissions with Kubernetes User</strong><br><strong>2. RBAC permissions with Kubernetes Groups</strong></p>\n<h3> </h3>\n<h3><a name=\"rbac-permissions-with-kubernetes-user\" href=\"https://dev.to/aws-builders/eks-auth-deep-dive-4fib#rbac-permissions-with-kubernetes-user\"></a>RBAC permissions with Kubernetes User</h3>\n<p>We can assign RBAC permissions to an <code>IAM user</code> by binding mapped <code>Kubernetes User</code> in <code>aws-auth</code> i.e <code>dev-user</code> to a <code>ClusterRole</code>/<code>Role</code>.</p>\n<ol>\n<li>\n<p>Create a <strong>ClusterRoleBinding</strong> to bind Kubernetes user <code>dev-user</code> to the <code>developer-cluster-role</code>:</p>\n<pre class=\"highlight yaml\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">rbac.authorization.k8s.io/v1beta1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRoleBinding</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">dev-user-cluster-role-binding</span>\n<span class=\"na\">subjects</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">User</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">dev-user</span> <span class=\"c1\"># Kubernetes User mapped to the IAM user in aws-auth configmap.</span>\n    <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n<span class=\"na\">roleRef</span><span class=\"pi\">:</span>\n  <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRole</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">eks-developer-cluster-role</span>\n  <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n</code></pre>\n</li>\n<li>\n<p>Map IAM user <code>arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:user/dev-user</code> to Kubernetes user <code>dev-user</code> in <code>aws-auth</code> configMap:<br><br></p>\n</li>\n</ol>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>  eksctl create iamidentitymapping <span class=\"se\">\\</span>\n    <span class=\"nt\">--cluster</span> iam-auth-cluster <span class=\"se\">\\</span>\n    <span class=\"nt\">--region</span> us-east-1 <span class=\"se\">\\</span>\n    <span class=\"nt\">--arn</span> <span class=\"s2\">\"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:user/dev-user\"</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--username</span> <span class=\"s2\">\"dev-user\"</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Once this </span><code style=\"font-weight: var(--font-weight-normal);\">ClusterRoleBinding</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> is created and the IAM user is mapped in </span><code style=\"font-weight: var(--font-weight-normal);\">aws-auth</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">, IAM user </span><code style=\"font-weight: var(--font-weight-normal);\">dev-user</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> would be able to get, list, or watch pods in any namespace.</span></div>\n</div>\n</div>\n<h3> </h3>\n<h3><a name=\"rbac-permissions-with-kubernetes-groups\" href=\"https://dev.to/aws-builders/eks-auth-deep-dive-4fib#rbac-permissions-with-kubernetes-groups\"></a>RBAC permissions with Kubernetes Groups</h3>\n<p>If we need to give the same set of permissions to multiple users, then instead of creating multiple <code>ClusterRoleBindings</code>, we can use Kubernetes Groups and attach that group to the users for whom those permissions are required.</p>\n<ol>\n<li>\n<p>Create a ClusterRoleBinding to bind Kubernetes Group <code>developer</code> to cluster role <code>eks-developer-cluster-role</code>:</p>\n<pre class=\"highlight yaml\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">rbac.authorization.k8s.io/v1beta1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRoleBinding</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">dev-user-group-cluster-role-binding</span>\n<span class=\"na\">subjects</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Group</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">dev</span>\n    <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n<span class=\"na\">roleRef</span><span class=\"pi\">:</span>\n  <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRole</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">eks-developer-cluster-role</span>\n  <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">\"</span>\n</code></pre>\n</li>\n<li>\n<p>Map IAM user <code>arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:user/dev-user</code> to Kubernetes user <code>dev-user</code> with <code>dev</code> group in <code>aws-auth</code> configMap:</p>\n<pre class=\"highlight shell\"><code>eksctl create iamidentitymapping <span class=\"se\">\\</span>\n  <span class=\"nt\">--cluster</span> iam-auth-cluster <span class=\"se\">\\</span>\n  <span class=\"nt\">--region</span> us-east-1 <span class=\"se\">\\</span>\n  <span class=\"nt\">--arn</span> <span class=\"s2\">\"arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/dev-user\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--username</span> <span class=\"s2\">\"dev-user\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--group</span> <span class=\"s2\">\"dev\"</span>\n</code></pre>\n<p>this would create an entry under <code>mapUsers</code> section in <code>aws-auth</code> configmap as:</p>\n<pre class=\"highlight yaml\"><code><span class=\"na\">mapUsers</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n  <span class=\"s\">- groups:</span>\n    <span class=\"s\">- dev</span>\n    <span class=\"s\">userarn: arn:aws:iam::&lt;AWS_ACCOUNT_ID&gt;:role/dev-user</span>\n    <span class=\"s\">username: dev-user</span>\n</code></pre>\n</li>\n</ol>\n<h2> </h2>\n<h2><a name=\"using-mapaccounts-to-map-iam-arn-in-an-aws-account-to-the-cluster\" href=\"https://dev.to/aws-builders/eks-auth-deep-dive-4fib#using-mapaccounts-to-map-iam-arn-in-an-aws-account-to-the-cluster\"></a>Using mapAccounts to Map IAM ARN in an AWS Account to the Cluster</h2>\n<p><code>mapAccounts</code> allows mapping all the <code>IAM Users</code> or <code>IAM Roles</code> of an <strong>AWS account</strong> to the cluster. It accepts the list of AWS Account IDs:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">mapAccounts</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n  <span class=\"s\">- \"&lt;AWS_ACCOUNT_ID_1&gt;\"</span>\n  <span class=\"s\">- \"&lt;AWS_ACCOUNT_ID_2&gt;\"</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">After mapping the AWS accounts to the cluster, we can use </span><strong style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\">Kubernetes User</strong><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> and </span><strong style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\">Kubernetes Group</strong><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> to assign permissions to those IAM entities.</span></div>\n</div>\n</div>",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
            ],
            "date_published": "2021-12-30T16:25:00+01:00",
            "date_modified": "2022-01-29T16:25:58+01:00"
        },
        {
            "id": "https://www.clouday.dev/kubernetes-backup-and-restore-with-velero.html",
            "url": "https://www.clouday.dev/kubernetes-backup-and-restore-with-velero.html",
            "title": "Kubernetes, backup and restore with Velero",
            "summary": " Docker and Kubernetes gives so many conveniences out of the box like rolling deployments, high availability, restarting failed containers (aka self-healing), well-managed secrets, and&hellip;",
            "content_html": "<p><img loading=\"lazy\" src=\"https://images.unsplash.com/photo-1591913139332-f8172ef511da?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80\" data-is-external-image=\"true\"  alt=\"black and silver turntable on black table\"></p>\n<p id=\"c11a\" class=\"in io fy ip b iq ir hu is it iu hy iv iw ix iy iz ja jb jc jd je jf jg jh ji dn gv\" data-selectable-paragraph=\"\">Docker and Kubernetes gives so many conveniences out of the box like rolling deployments, high avail<span id=\"rmm\">a</span>bility, restarting failed containers (aka self-healing), well-managed secrets, and the list goes on…Imagine the scenario where you have all system deployed on kubernetes only having 1000+ applications and your cluster is down for few hour due to any issues like network , hardware etc . Downtime of Kubernetes cluster may cause financial impact on business , also it will hurts your organization brand .Setting up entire cluster with all required application is not an easy task , it will require many hours , days to setup the cluster again and make ready in working condition . So we need to make sure that we will have some system ready which will help us to handle Kubernetes cluster disaster scenario quickly without any impact on business .</p>\n<p id=\"8057\" class=\"in io fy ip b iq jj hu is it jk hy iv iw jl iy iz ja jm jc jd je jn jg jh ji dn gv\" data-selectable-paragraph=\"\">Here are some examples which you are listening almost each and every day while dealing with deployments on k8s :</p>\n<ol class=\"\">\n<li id=\"af6e\" class=\"in io fy ip b iq jj hu is it jk hy iv iw jl iy iz ja jm jc jd je jn jg jh ji jo jp jq gv\" data-selectable-paragraph=\"\">I didn’t have backup available of my application setup .</li>\n<li id=\"e89b\" class=\"in io fy ip b iq jr hu is it js hy iv iw jt iy iz ja ju jc jd je jv jg jh ji jo jp jq gv\" data-selectable-paragraph=\"\">What will i do if my cluster goes down ?</li>\n<li id=\"ede4\" class=\"in io fy ip b iq jr hu is it js hy iv iw jt iy iz ja ju jc jd je jv jg jh ji jo jp jq gv\" data-selectable-paragraph=\"\">What will i do if my namespace deleted ?</li>\n<li id=\"07cc\" class=\"in io fy ip b iq jr hu is it js hy iv iw jt iy iz ja ju jc jd je jv jg jh ji jo jp jq gv\" data-selectable-paragraph=\"\">How can I rollback my production deployment on previously deployed version ?</li>\n</ol>\n<p id=\"dda4\" class=\"in io fy ip b iq jj hu is it jk hy iv iw jl iy iz ja jm jc jd je jn jg jh ji dn gv\" data-selectable-paragraph=\"\">Well , Velero is answer for all above problems for maintaining your Kubernetes infrastructure to handle disaster scenario .Now let’s see what is velero and in which scenario we can use velero to solve stability issues of your kubernetes cluster .</p>",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
            ],
            "date_published": "2021-11-30T16:09:00+01:00",
            "date_modified": "2022-01-29T16:11:06+01:00"
        },
        {
            "id": "https://www.clouday.dev/amazon-eks-distrop.html",
            "url": "https://www.clouday.dev/amazon-eks-distrop.html",
            "title": "Amazon EKS Distro",
            "summary": " Amazon EKS Distro (EKS-D) is a Kubernetes distribution based on and used by Amazon Elastic Kubernetes Service (EKS) to create reliable and secure Kubernetes clusters. With&hellip;",
            "content_html": "<p><img loading=\"lazy\" src=\"https://images.unsplash.com/photo-1433840496881-cbd845929862?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80\" data-is-external-image=\"true\"  alt=\"beam design-printed paper on desk\"></p>\n<p>Amazon <strong>EKS Distro</strong> (EKS-D) is a Kubernetes distribution based on and used by Amazon Elastic Kubernetes Service (EKS) to create reliable and secure Kubernetes clusters. With EKS-D, you can rely on the same versions of Kubernetes and its dependencies deployed by Amazon EKS. This includes the latest upstream updates, as well as extended security patching support. EKS-D follows the same Kubernetes version release cycle as Amazon EKS, and we provide the bits here. EKS-D provides the same software that has enabled tens of thousands of Kubernetes clusters on Amazon EKS.</p>\n<p>What is the difference between EKS (the AWS Kubernetes cloud service) and EKS-D? The main difference is in how they are managed. EKS is a fully managed Kubernetes platform, while EKS-D is available to install and manage yourself. You can run EKS-D on-premises, in a cloud, or on your own systems. EKS-D provides a path to having essentially the same Amazon EKS Kubernetes distribution running wherever you need to run it.</p>\n<p>Once EKS-D is running, you are responsible for managing and upgrading it yourself. For end users, however, running applications is the same as with EKS since the two support the same API versions and same set of components.</p>\n<p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2020/11/30/hausenblas_options-1000x.png\" data-is-external-image=\"true\"  alt=\"spectrum of EKS-based solutions options\"></p>\n<h2> </h2>\n<h2 id=\"project-tenets-unless-you-know-better-ones\">Project Tenets (unless you know better ones)</h2>\n<p>The tenets of the EKS Distro (EKS-D) project are:</p>\n<ol>\n<li><strong>The Source</strong>: The goal of the EKS Distro is to be the Kubernetes source for EKS and EKS Anywhere</li>\n<li><strong>Simple</strong>: Make using a Kubernetes distribution simple and boring (reliable and secure)</li>\n<li><strong>Opinionated Modularity</strong>: Provide opinionated defaults about the best components to include with Kubernetes but give customers the ability to swap them out</li>\n<li><strong>Open</strong>: Provide open source tooling backed, validated and maintained by Amazon</li>\n<li><strong>Ubiquitous</strong>: Enable customers and partners to integrate a Kubernetes distribution in the most common tooling (Kubernetes installers and distributions, infrastructure as code, and more)</li>\n<li><strong>Stand Alone</strong>: Provided for use anywhere without AWS dependencies</li>\n<li><strong>Better with AWS</strong>: Enable AWS customers to adopt additional AWS services easily</li>\n</ol>\n<h2> </h2>\n<h2>Getting started with EKS-D</h2>\n<p>There are a lot of tools that are providing install methods as well integrations with EKS Distro, here we are going to describe how to use Kubernetes in Docker (KinD) to run EKS-D on your local machine. KinD, like Minikube and Microk8s, is way to host Kubernetes on your local machine except it doesn’t require additional drivers or a virtual machine.</p>\n<p id=\"7000\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">The first step involves creating a fork of the <a class=\"ck ir\" href=\"https://github.com/kbst/kind-eks-d\" rel=\"noopener ugc nofollow\" target=\"_blank\">kbst/kind</a> project from Kubestack. Once the project has been forked, update the <code class=\"is it iu iv iw b\">Makefile</code> in the root directory with the environment variables, e.g. the <code class=\"is it iu iv iw b\">RELEASE_BRANCH</code>, <code class=\"is it iu iv iw b\">VERSION</code>, and <code class=\"is it iu iv iw b\">SOURCE_URL</code> of the build you want to use.</p>\n<pre class=\"ix iy iz ja jb jc gw bt\"><span id=\"2714\" class=\"fc jd je ef iw b jf jg jh s ji\" data-selectable-paragraph=\"\">RELEASE_BRANCH = 1-20<br>VERSION := v$(subst -,.,$(RELEASE_BRANCH)).4<br>SOURCE_URL = <a class=\"ck ir\" href=\"https://distro.eks.amazonaws.com/kubernetes-$%7BRELEASE_BRANCH%7D/releases/1/artifacts/kubernetes/$%7BVERSION%7D/kubernetes-src.tar.gz\" rel=\"noopener ugc nofollow\" target=\"_blank\">https://distro.eks.amazonaws.com/kubernetes-${RELEASE_BRANCH}/releases/1/artifacts/kubernetes/${VERSION}/kubernetes-src.tar.gz</a><br>GIT_SHA := $(shell echo `git rev-parse --verify HEAD^{commit}`)<br>IMAGE_NAME = public.ecr.aws/jicowan/kind-eks-d<br>TEST_IMAGE = ${IMAGE_NAME}:${GIT_SHA}</span></pre>\n<p id=\"da47\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">In this example, I am using Kubernetes v1.20.4. I am also pushing the resulting container image to ECR public. You can find a list of the available releases at <a class=\"ck ir\" href=\"https://distro.eks.amazonaws.com/#releases\" rel=\"noopener ugc nofollow\" target=\"_blank\">https://distro.eks.amazonaws.com/#releases</a>. To get the <code class=\"is it iu iv iw b\">SOURCE_URL</code> for a release, download the release manifest and run the following <code class=\"is it iu iv iw b\">yq</code> query:</p>\n<pre class=\"ix iy iz ja jb jc gw bt\"><span id=\"3b56\" class=\"fc jd je ef iw b jf jg jh s ji\" data-selectable-paragraph=\"\">yq eval '.status.components.[] | select(.name=\"kubernetes\") | .assets.[] | select(.name==\"kubernetes-src.tar.gz\")' ./kubernetes-1-20-eks-1.yaml</span></pre>\n<p id=\"dd79\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">The output should looks similar to this:</p>\n<pre class=\"ix iy iz ja jb jc gw bt\"><span id=\"e943\" class=\"fc jd je ef iw b jf jg jh s ji\" data-selectable-paragraph=\"\">archive:<br>  sha256: 7b642868c905e41a93beded9968d2c48daef7ecd57815bf0f83ca1337e1f6176<br>  sha512: 095e57e905a041963689ff9b2d1de30dd6f0344530253cccd4e3d91985091cc37564b95f45c1ed160129306d06f5d2670feb457cbb01e274f5a0c0f3c724f834<br>  uri: <a class=\"ck ir\" href=\"https://distro.eks.amazonaws.com/kubernetes-1-20/releases/1/artifacts/kubernetes/v1.20.4/kubernetes-src.tar.gz\" rel=\"noopener ugc nofollow\" target=\"_blank\">https://distro.eks.amazonaws.com/kubernetes-1-20/releases/1/artifacts/kubernetes/v1.20.4/kubernetes-src.tar.gz</a><br>description: Kubernetes source tarball<br>name: kubernetes-src.tar.gz<br>type: Archive</span></pre>\n<p id=\"4120\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">Verify that the <code class=\"is it iu iv iw b\">SOURCE_URL</code> matches the URI in the output from <code class=\"is it iu iv iw b\"><a class=\"ck ir\" href=\"https://mikefarah.gitbook.io/yq/\" rel=\"noopener ugc nofollow\" target=\"_blank\">yq</a></code>. Be sure to leave the <code class=\"is it iu iv iw b\">RELEASE_BRANCH</code> and <code class=\"is it iu iv iw b\">VERSION</code> variables intact as they will be populated by the values you specified earlier.</p>\n<p id=\"4b38\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">If, like me, you want to push the image the your own registry, you will need to update the <code class=\"is it iu iv iw b\">main.yml</code> file under GitHub actions. As I am pushing the resulting image to ECR, I need to update Docker login section with environment variables for my AWS access key ID and secret key. GitHub actions will use these secrets to authenticate to ECR public.</p>\n<pre class=\"ix iy iz ja jb jc gw bt\"><span id=\"e35c\" class=\"fc jd je ef iw b jf jg jh s ji\" data-selectable-paragraph=\"\">- name: Docker login      <br>  uses: docker/login-action@v1      <br>  with:        <br>    registry: public.ecr.aws        <br>    username: ${{ secrets.AWS_ACCESS_KEY_ID }}        <br>    password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      <br>  env:        <br>  AWS_REGION: us-east-1</span></pre>\n<p id=\"f01f\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">Before saving your changes, create GitHub secret for <code class=\"is it iu iv iw b\">AWS_ACCESS_KEY_ID</code> and <code class=\"is it iu iv iw b\">AWS_SECRET_ACCESS_KEY</code>. Please refer to <a class=\"ck ir\" href=\"https://docs.github.com/en/actions/reference/encrypted-secrets\" rel=\"noopener ugc nofollow\" target=\"_blank\">https://docs.github.com/en/actions/reference/encrypted-secrets</a> if you’re unfamiliar with how to create GitHub secrets. When you save the changes <code class=\"is it iu iv iw b\">main.yml</code> it will trigger workflow that will build and push your image to your registry.</p>\n<p id=\"c567\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">Next, create a configuration file called <code class=\"is it iu iv iw b\">kind-eks-d-v1.20.conf</code> for KinD that looks similar to the following:</p>\n<pre class=\"ix iy iz ja jb jc gw bt\"><span id=\"b2ed\" class=\"fc jd je ef iw b jf jg jh s ji\" data-selectable-paragraph=\"\">kind: Cluster<br>apiVersion: kind.x-k8s.io/v1alpha4<br>name: eks-d-1-20<br>nodes:<br>- role: control-plane<br>  image: public.ecr.aws/jicowan/kind-eks-d:4e13a3f38c26a14e6a333fc7b8246c02ac4b33b2<br>- role: worker<br>  image: public.ecr.aws/jicowan/kind-eks-d:4e13a3f38c26a14e6a333fc7b8246c02ac4b33b2</span></pre>\n<p id=\"33c1\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">Be aware you may need to update the image with the URI of your image, although you’re free to use the image that I pushed to ECR public.</p>\n<p id=\"b6ca\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">Finally, create a KinD cluster by executing the following command:</p>\n<pre class=\"ix iy iz ja jb jc gw bt\"><span id=\"a3d2\" class=\"fc jd je ef iw b jf jg jh s ji\" data-selectable-paragraph=\"\">kind create cluster --config ./kind-eks-d-v1.20.conf</span></pre>\n<p id=\"bc7a\" class=\"ht hu ef hv b hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq do fc\" data-selectable-paragraph=\"\">In about 3–5m you’ll have an EKS-D cluster running on your local machine!</p>",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "Kubernetes",
                   "EKS"
            ],
            "date_published": "2021-10-30T15:20:00+02:00",
            "date_modified": "2022-01-29T16:10:56+01:00"
        },
        {
            "id": "https://www.clouday.dev/what-is-a-terraform-and-infrastructure-as-code.html",
            "url": "https://www.clouday.dev/what-is-a-terraform-and-infrastructure-as-code.html",
            "title": "What is a Terraform and Infrastructure as Code?",
            "summary": " Terraform is an open source tool built by Hashicorp to automate the provisioning of infrastructure resources. It is used to build, manage, update and&hellip;",
            "content_html": "<p><img loading=\"lazy\" src=\"https://aimconsulting.com/wp-content/uploads/2020/06/infrastructure-as-code.jpg\" data-is-external-image=\"true\"  alt=\"Top Infrastructure as Code (IaC) Providers: Advantages, Best Practices, and  Futures | Insights: Blog - AIM Consulting\"></p>\n<p>Terraform is an open source tool built by Hashicorp to automate the provisioning of infrastructure resources. It is used to build, manage, update and delete infrastructure resources like virtual machines, containers, networking and others using infrastructure as a coding philosophy. Terraform is a vendor agnostic tool and can manage infrastructure for multiple resource providers (for example AWS, Google Cloud, Azure, Aviatrix, Heroku, Oracle, etc.).</p>\n<p>In simple terms, if you want to provision a Virtual Private Cloud or an EC2 instance in AWS, you can write a terraform configuration to automate this process rather than doing it manually from AWS console.</p>\n<p>Infrastructure as code is the process of provisioning and managing your cloud resources by writing a template file that is both human readable, and machine consumable. For AWS cloud development the built-in choice for infrastructure as code is <a href=\"https://aws.amazon.com/cloudformation/\" target=\"_blank\" class=\"highlight\" rel=\"noopener\">AWS CloudFormation</a>.</p>\n<p>Using AWS CloudFormation you can write a description of the resources that you want to create on your AWS account, and then ask AWS CloudFormation to make this description into reality. For example the following YAML template snippet describes an AWS ECS service resource to create:</p>\n<pre><code class=\"language-yaml hljs\"><span class=\"hljs-attr\">Service:</span>\n<span class=\"hljs-attr\">  Type:</span> <span class=\"hljs-string\">'AWS::ECS::Service'</span>\n<span class=\"hljs-attr\">  DependsOn:</span> <span class=\"hljs-string\">'ServiceDiscoveryService'</span>\n<span class=\"hljs-attr\">  Properties:</span>\n<span class=\"hljs-attr\">    ServiceName:</span> <span class=\"hljs-string\">'app'</span>\n<span class=\"hljs-attr\">    Cluster:</span> <span class=\"hljs-string\">'production'</span>\n<span class=\"hljs-attr\">    DeploymentConfiguration:</span>\n<span class=\"hljs-attr\">      MaximumPercent:</span> <span class=\"hljs-number\">200</span>\n<span class=\"hljs-attr\">      MinimumHealthyPercent:</span> <span class=\"hljs-number\">75</span>\n<span class=\"hljs-attr\">    DesiredCount:</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attr\">    TaskDefinition:</span> !Ref <span class=\"hljs-string\">'TaskDefinition'</span>\n<span class=\"hljs-attr\">    ServiceRegistries:</span>\n<span class=\"hljs-attr\">      - RegistryArn:</span> !GetAtt ServiceDiscoveryService.Arn\n<span class=\"hljs-attr\">        ContainerPort:</span> <span class=\"hljs-number\">3000</span>\n<span class=\"hljs-attr\">        ContainerName:</span> <span class=\"hljs-string\">'myapp'</span>\n</code></pre>\n<p>AWS CloudFormation takes this template and then assumes the responsibility of creating, updating, and deleting resources on your AWS account according to what is described in the template. If you add a new resource to the file CloudFormation will create that resource on your account. If you update a resource CloudFormation will either update or replace any existing matching resources. And if you remove a resource from the template it will be cleaned up and removed from your AWS account.</p>",
            "image": "https://www.clouday.dev/media/posts/3/Terraform.png",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "IaC"
            ],
            "date_published": "2021-09-30T15:50:00+02:00",
            "date_modified": "2022-01-29T15:56:56+01:00"
        },
        {
            "id": "https://www.clouday.dev/hello-kubernetes.html",
            "url": "https://www.clouday.dev/hello-kubernetes.html",
            "title": "Kubernetes",
            "summary": "Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly&hellip;",
            "content_html": "<blockquote>\n<p>Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.</p>\n</blockquote>\n<p>The name Kubernetes originates from Greek, meaning helmsman or pilot. K8s as an abbreviation results from counting the eight letters between the \"K\" and the \"s\". Google open-sourced the Kubernetes project in 2014. Kubernetes combines <a href=\"https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/\">over 15 years of Google's experience</a> running production workloads at scale with best-of-breed ideas and practices from the community.</p>\n<hr>\n<p> </p>",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "Kubernetes"
            ],
            "date_published": "2021-06-30T12:08:00+02:00",
            "date_modified": "2022-01-29T15:55:57+01:00"
        },
        {
            "id": "https://www.clouday.dev/automation-vs-orchestration-whats-the-difference.html",
            "url": "https://www.clouday.dev/automation-vs-orchestration-whats-the-difference.html",
            "title": "Automation vs. Orchestration: What’s the Difference?",
            "summary": "Whether your applications and data are housed on-premise or in the cloud, automation and orchestration make complex business processes run smoothly. The more workloads you’re&hellip;",
            "content_html": "<div id=\"item-5c798ec9b208fc28721ef693\" class=\"sqs-layout sqs-grid-12 columns-12\" data-layout-label=\"Post Body\" data-type=\"item\" data-updated-on=\"1551470823709\">\n<div id=\"yui_3_17_2_1_1597227630910_273\" class=\"row sqs-row\">\n<div id=\"yui_3_17_2_1_1597227630910_272\" class=\"col sqs-col-12 span-12\">\n<div id=\"block-yui_3_17_2_1_1564677119000_171191\" class=\"sqs-block image-block sqs-block-image sqs-text-ready\" data-block-type=\"5\">\n<div id=\"yui_3_17_2_1_1597227630910_271\" class=\"sqs-block-content\">\n<div id=\"yui_3_17_2_1_1597227630910_270\" class=\"\n          image-block-outer-wrapper\n          layout-caption-below\n          design-layout-inline\n          combination-animation-none\n          individual-animation-none\n          individual-text-animation-none\n        \" data-test=\"image-block-inline-outer-wrapper\">\n<figure id=\"yui_3_17_2_1_1597227630910_269\" class=\"\n              sqs-block-image-figure\n              intrinsic\n            \">\n<div id=\"yui_3_17_2_1_1597227630910_268\" class=\"\n                image-block-wrapper\n                \n          \n        \n                has-aspect-ratio\n              \" data-animation-role=\"image\"><figure class=\"thumb-image loaded\"><img loading=\"lazy\"  src=\"https://images.squarespace-cdn.com/content/v1/5a09abcb90bcce4bd5518c91/1564683630206-XX7DT7NV0Y4VK136AF7O/ke17ZwdGBToddI8pDm48kCuklj2YuBCXDCzdVfA7N54UqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYwL8IeDg6_3B-BRuF4nNrNcQkVuAT7tdErd0wQFEGFSnPNZb1olE9Yx5khhoDIGVPJo4r7RzB4Bw8BE5J_vMuAuETvjpvZO0R1wDX8fMpw45w/Complex+roads?format=1500w\" data-is-external-image=\"true\"  alt=\"Complex roads\" data-src=\"https://images.squarespace-cdn.com/content/v1/5a09abcb90bcce4bd5518c91/1564683630206-XX7DT7NV0Y4VK136AF7O/ke17ZwdGBToddI8pDm48kCuklj2YuBCXDCzdVfA7N54UqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYwL8IeDg6_3B-BRuF4nNrNcQkVuAT7tdErd0wQFEGFSnPNZb1olE9Yx5khhoDIGVPJo4r7RzB4Bw8BE5J_vMuAuETvjpvZO0R1wDX8fMpw45w/Complex+roads\" data-image=\"https://images.squarespace-cdn.com/content/v1/5a09abcb90bcce4bd5518c91/1564683630206-XX7DT7NV0Y4VK136AF7O/ke17ZwdGBToddI8pDm48kCuklj2YuBCXDCzdVfA7N54UqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYwL8IeDg6_3B-BRuF4nNrNcQkVuAT7tdErd0wQFEGFSnPNZb1olE9Yx5khhoDIGVPJo4r7RzB4Bw8BE5J_vMuAuETvjpvZO0R1wDX8fMpw45w/Complex+roads\" data-image-dimensions=\"2500x980\" data-image-focal-point=\"0.5,0.5\" data-load=\"false\" data-image-id=\"5d432e1096cf600001f6a1ed\" data-type=\"image\" data-image-resolution=\"1500w\"></figure></div>\n</figure>\n</div>\n</div>\n</div>\n<div id=\"block-4c7d07e39c54d59e30df\" class=\"sqs-block html-block sqs-block-html\" data-block-type=\"2\">\n<div class=\"sqs-block-content\">\n<p class=\"\">Whether your applications and data are housed on-premise or in the cloud, automation and orchestration make complex business processes run smoothly. The more workloads you’re managing, the more helpful these tools will be no matter what your IT strategy is.</p>\n<p class=\"\">To understand automation vs. orchestration, it’s helpful to consider each function on its own, first.</p>\n<h2>What is IT automation?</h2>\n<p class=\"\">Automation, generally speaking, means completing a single task or function without human intervention. Executed wisely, automation makes traditionally time-intensive, manual processes more efficient and reliable.</p>\n<p class=\"\">In IT, it’s possible to automate a wide range of processes and tasks, from app deployment and integration, to securing endpoints and creating service tickets, for both on-premise and cloud tasks. In cloud automation, for instance, you might use automation tools and machine learning to dynamically deploy assets to the cloud, manage cloud computing workloads or classify terabytes of images—something our partner, Google Cloud, can help you do.</p>\n<h2>What is orchestration?</h2>\n<p class=\"\">At its core, Orchestration is most akin to managing a large-scale virtual environment or network. Orchestrating the scheduling and integration of automated tasks between complex distributed systems and services—whether on-premise or in the cloud—streamlines and simplifies interconnected workloads, repeatable processes, and operations. Using today’s orchestration tools, you can automate the arrangement, coordination and management of complex computer systems, middleware and services within your computing environment, and direct automated processes to support larger workflows.</p>\n<p class=\"\">With modern IT teams now responsible for managing hundreds to thousands of applications and servers, manual administration simply can’t scale today’s needs. Orchestration is essential for delivering highly available, dynamically scaling, performant applications, and cloud systems, relieving your team of a very heavy burden. </p>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://www.clouday.dev/media/posts/6/AutomationVsOrchestration.png",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "Orchestration",
                   "Automation"
            ],
            "date_published": "2021-05-30T12:21:00+02:00",
            "date_modified": "2022-01-29T15:55:43+01:00"
        },
        {
            "id": "https://www.clouday.dev/ecs-vs-fargate-whats-the-difference.html",
            "url": "https://www.clouday.dev/ecs-vs-fargate-whats-the-difference.html",
            "title": "ECS vs. Fargate: What&#x27;s the difference?",
            "summary": " When discussing options to run Docker on AWS, I’m often asked about the differences between ECS and EKS or Kubernets. However, lately, a new question arises: What’s&hellip;",
            "content_html": "<div class=\"row\">\n<div class=\"col-sm-8 offset-sm-2\">\n<div><img loading=\"lazy\" src=\"https://images.unsplash.com/photo-1494412519320-aa613dfb7738?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80\" data-is-external-image=\"true\"  alt=\"bird's photo of cityscape\"></div>\n<div> </div>\n<div class=\"meta-information\"><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">When discussing options to run Docker on AWS, I’m often asked about the differences between ECS and </span><a href=\"https://cloudonaut.io/eks-vs-ecs-orchestrating-containers-on-aws/\" style=\"font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">EKS</a><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> or </span><a href=\"https://cloudonaut.io/ecs-vs-kubernetes/\" style=\"font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">Kubernets</a><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">. However, lately, a new question arises: What’s the difference between ECS and </span><a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html\" target=\"_blank\" rel=\"noopener\" style=\"font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">AWS Fargate</a><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">? In this blog post, you get the answer. You also learn about the advantages and disadvantages of both options.</span></div>\n</div>\n</div>\n<div class=\"row content\">\n<div class=\"col-12 col-sm-8\">\n<p>To understand the difference, let’s divide the ECS service into two responsibilities:</p>\n<ol>\n<li>Managing the lifecycle and placement of tasks</li>\n<li>Running containers</li>\n</ol>\n</div>\n</div>",
            "image": "https://www.clouday.dev/media/posts/4/ECSvsFargate.jpeg",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "Fargate",
                   "ECS"
            ],
            "date_published": "2021-04-30T10:38:00+02:00",
            "date_modified": "2022-01-29T15:55:19+01:00"
        },
        {
            "id": "https://www.clouday.dev/what-is-amazon-elastic-container-service.html",
            "url": "https://www.clouday.dev/what-is-amazon-elastic-container-service.html",
            "title": "What is Amazon Elastic Container Service?",
            "summary": "Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service that makes it easy to run, stop, and manage containers on&hellip;",
            "content_html": "<div class=\"awsdocs-page-header-container\">\n<div class=\"awsdocs-page-header\"><img loading=\"lazy\" src=\"https://images.unsplash.com/photo-1606185540834-d6e7483ee1a4?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80\" data-is-external-image=\"true\"  alt=\"red and blue cargo ship on body of water during daytime\"></div>\n</div>\n<p>Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management service that makes it easy to run, stop, and manage containers on a cluster. Your containers are defined in a task definition which you use to run individual tasks or as a service. You can run your tasks and services on a serverless infrastructure that is managed by AWS Fargate or, for more control over your infrastructure, you can run your tasks and services on a cluster of Amazon EC2 instances that you manage.</p>\n<p>Amazon ECS enables you to launch and stop your container-based applications with simple API calls. You can also retrieve the state of your cluster from a centralized service and, for existing users of Amazon EC2, access many familiar Amazon EC2 features.</p>\n<p>You can schedule the placement of your containers across your cluster based on your resource needs, isolation policies, and availability requirements. With Amazon ECS, you do not have to operate your own cluster management and configuration management systems or worry about scaling your management infrastructure.</p>\n<p>Amazon ECS can be used to create a consistent deployment and build experience, manage, and scale batch and Extract-Transform-Load (ETL) workloads, and build sophisticated application architectures on a microservices model. </p>",
            "image": "https://www.clouday.dev/media/posts/5/ECS.png",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
                   "ECS"
            ],
            "date_published": "2021-03-30T12:19:00+02:00",
            "date_modified": "2022-01-29T15:38:42+01:00"
        },
        {
            "id": "https://www.clouday.dev/crypto-policies.html",
            "url": "https://www.clouday.dev/crypto-policies.html",
            "title": "RedHat system-wide crypto policies (rhel 8.2)",
            "summary": " Across enterprise IT the security landscape is changing and attackers are coming up with more sophisticated attacks. The cryptographic algorithms that might be robust&hellip;",
            "content_html": "<p><img loading=\"lazy\" src=\"https://images.unsplash.com/photo-1523961131990-5ea7c61b2107?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80\" data-is-external-image=\"true\"  alt=\"geometric shape digital wallpaper\"></p>\n<p>Across enterprise IT the security landscape is changing and attackers are coming up with more sophisticated attacks. The cryptographic algorithms that might be robust and reliable today, may not necessarily be so tomorrow.</p>\n<p style=\"font-weight: 400;\">In RHEL 8.2 to enable users to specify their own crypto policies if the built-in policies do not meet their requirements.</p>\n<p style=\"font-weight: 400;\">As a refresher, system-wide crypto policies introduced in RHEL 8 are:</p>\n<ol style=\"font-weight: 400;\">\n<li style=\"font-weight: var(--pfe-theme--font-weight--default,400);\">Centrally managed on the system using a simple command to show the currently set system-wide crypto policy and update the system-wide crypto policy.$ update-crypto-policies --show DEFAULT<strong>Update the system-wide crypto policy to set the level to future</strong>$ update-crypto-policies --set FUTURE Setting system policy to FUTURE</li>\n<li style=\"font-weight: var(--pfe-theme--font-weight--default,400);\"><strong>Show the system-wide crypto policy currently in effect </strong></li>\n<li style=\"font-weight: var(--pfe-theme--font-weight--default,400);\">Effective across applications built using core cryptographic subsystems. For example, if your application leverages OpenSSL, or GnuTLS, these applications will be able to benefit from the RHEL crypto policies. </li>\n<li style=\"font-weight: var(--pfe-theme--font-weight--default,400);\">Configurable to a particular predefined policy level. In RHEL 8, four policies are provided under the names \"LEGACY\", \"DEFAULT\", \"FUTURE\" and \"FIPS\". Detailed settings about each policy are <a href=\"https://access.redhat.com/articles/3642912\">summarized in this post about strong crypto defaults in RHEL 8</a> and update-crypto-policies man pages.</li>\n</ol>\n<h3 dir=\"ltr\">Modifying an existing crypto policy</h3>\n<p dir=\"ltr\">To modify existing crypto policies, use policy modifier modules. These are text files that include policy instructions to the <code>update-crypto-policies</code> tool. </p>\n<p dir=\"ltr\">The naming of these files must follow the following convention: <strong>&lt;MODULE&gt;.pmod</strong>, where <strong>&lt;MODULE&gt;</strong> is the name of the modifier in uppercase without spaces, and .pmod is the file extension in lowercase. </p>\n<p>The location of these files should be:</p>\n<p><code>/etc/crypto-policies/policies/modules</code> folder <span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">(or the </span><code style=\"font-weight: var(--font-weight-normal);\">/usr/share/crypto-policies/policies/modules</code><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\"> folder if they are in installed packages).</span></p>\n<p> </p>\n<h3>SSL_ERROR_UNSUPPORTED_HASH_ALGORITHM</h3>\n<p>Try to revert back to legacy policy: <strong><span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;\">sudo update-crypto-policies --set LEGACY </span></strong></p>\n<p>To get <span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">the old policy, use: <strong>sudo update-crypto-policies --set DEFAULT:FEDORA32</strong> <br>To get back to current policy: <strong>sudo update-crypto-policies --set DEFAULT</strong></span></p>\n<p> </p>\n<p class=\"msg msg--success\"><em><a href=\"#INTERNAL_LINK#/post/null\" title=\"https://www.redhat.com/en/blog/how-customize-crypto-policies-rhel-82\">https://www.redhat.com/en/blog/how-customize-crypto-policies-rhel-82</a></em></p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Toyhoshi"
            },
            "tags": [
            ],
            "date_published": "2021-02-28T18:30:00+01:00",
            "date_modified": "2022-01-29T15:54:34+01:00"
        }
    ]
}
